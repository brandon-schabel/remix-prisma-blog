generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
    provider          = "postgres"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("DATABASE_URL_SHADOW")
}

model Post {
    id        Int       @id @default(autoincrement())
    title     String
    content   Json
    createdAt DateTime  @default(now())
    updatedAt DateTime  @default(now())
    author    User      @relation(fields: [authorId], references: [id])
    authorId  String
    comments  Comment[]
    published Boolean   @default(false)
    images    String[]
    photos    Photo[]
    tags      String[]
}

model User {
    id               String    @id
    username         String    @unique
    email            String
    post             Post[]
    comments         Comment[]
    firstName        String
    lastName         String
    authorizedPoster Boolean   @default(value: false)
    isAdmin          Boolean   @default(value: false)
    uploadedPhotos   Photo[]
}

model Comment {
    id          String   @id @default(cuid())
    text        String
    createdBy   User     @relation(fields: [createdById], references: [id])
    createdById String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @default(now())
    post        Post     @relation(fields: [postId], references: [id])
    postId      Int
}

model Gallery {
    id     Int      @id @default(autoincrement())
    name   String
    photos Photo[]
    tags   String[]
}

model PhotoSize {
    id        Int      @id @default(autoincrement())
    width     Int?
    height    Int?
    photo     Photo    @relation(fields: [photoId], references: [id])
    photoId   String
    createdAt DateTime @default(now())
    publicURL String
}

model Photo {
    id           String      @id @default(cuid())
    title        String?
    description  String?
    publicURL    String
    createdAt    DateTime    @default(now())
    updatedAt    DateTime    @default(now())
    postId       Int?
    post         Post?       @relation(fields: [postId], references: [id])
    uploadedById String
    uploadedBy   User        @relation(fields: [uploadedById], references: [id])
    bucket       String
    // fileKey is full path to file
    fileKey      String
    filename     String
    gallery      Gallery?    @relation(fields: [galleryId], references: [id])
    galleryId    Int?
    tags         String[]
    photoSizes   PhotoSize[]
}
